{"version":3,"sources":["components/LiftInput/calculateBlock.js","components/LiftInput/lift-input.js","App.js","serviceWorker.js","index.js"],"names":["calculateBlock","command","blockContainer","Array","fill","steps","split","index","isLoaded","forEach","step","console","log","map","block","toString","toUpperCase","join","LiftInput","props","mySubmitHandler","event","preventDefault","setState","result","state","myChangeHandler","target","value","onSubmit","this","type","onChange","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wOAoCeA,EApCQ,SAACC,GACpB,IAAMC,EAAiBC,MAAM,IAAIC,KAAK,GACtC,GAAgB,KAAZH,EAAgB,MAAO,+BAC3B,IAAII,EAAQJ,EAAQK,MAAM,IACtBC,EAAQ,EACRC,GAAW,EA6Bf,OA5BAH,EAAMI,SAAQ,SAAAC,GAEV,OAAQA,GACJ,IAAK,IACDH,EAAQ,EACRC,GAAW,EACX,MACJ,IAAK,IACDD,IACA,MACJ,IAAK,IAEGC,GAAYD,EAAQ,IAAIL,EAAeK,KAC3C,MACJ,QACII,QAAQC,IAAIL,OAOIL,EAAeW,KAAI,SAACC,GAG5C,OAFIA,EAAQ,KAAIA,EAAQ,IAEjBA,KAGgBD,KAAK,SAAAC,GAAK,OAAIA,EAAMC,SAAS,IAAIC,iBAAgBC,KAAK,KCDtEC,E,kDA7BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAGVC,gBAAkB,SAACC,GACfA,EAAMC,iBACN,EAAKC,SAAS,CAAEC,OAAQxB,EAAe,EAAKyB,MAAMxB,YANnC,EAQnByB,gBAAkB,SAACL,GACf,EAAKE,SAAS,CAAEtB,QAASoB,EAAMM,OAAOC,SAPtC,EAAKH,MAAQ,CAAExB,QAAS,GAAIuB,OAAQ,IAFrB,E,qDAYf,OACI,0BAAMK,SAAUC,KAAKV,iBACjB,8DACA,2BACIW,KAAK,OACLC,SAAUF,KAAKJ,kBAEnB,2BACIK,KAAK,WAET,4CAAkBD,KAAKL,MAAMD,a,GAvBrBS,IAAMC,W,MCSfC,MARf,WACI,OACI,yBAAKC,UAAU,OACX,kBAAC,EAAD,QCKQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,a","file":"static/js/main.ce465b38.chunk.js","sourcesContent":["const calculateBlock = (command) => {\n    const blockContainer = Array(10).fill(0);\n    if (command === '') return 'Empty command is not allowed';\n    var steps = command.split(\"\");\n    var index = 0;\n    var isLoaded = false;\n    steps.forEach(step => {\n        // console.log(step);\n        switch (step) {\n            case 'P':\n                index = 0;\n                isLoaded = true;\n                break;\n            case 'M':\n                index++;\n                break;\n            case 'L':\n                // console.log(index);\n                if (isLoaded && index < 10) blockContainer[index]++;\n                break;\n            default:\n                console.log(index);\n        }\n        // console.log(index);\n        // console.log(blockContainer.map((block) => { if (block > 15) { return 'F' } block.toString(16).toUpperCase() }).join(''));\n\n    })\n\n    const cleanBlockConatiner = blockContainer.map((block) => {\n        if (block > 15) block = 15;\n        // console.log('new block', block)\n        return block;\n    });\n    // console.log(cleanBlockConatiner);\n    return cleanBlockConatiner.map((block => block.toString(16).toUpperCase())).join('');\n}\nexport default calculateBlock;","import React from 'react';\nimport calculateBlock from './calculateBlock'\n\nclass LiftInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { command: '', result: '' };\n    }\n    mySubmitHandler = (event) => {\n        event.preventDefault();\n        this.setState({ result: calculateBlock(this.state.command) });\n    }\n    myChangeHandler = (event) => {\n        this.setState({ command: event.target.value });\n    }\n    render() {\n        return (\n            <form onSubmit={this.mySubmitHandler}>\n                <p>Enter your command, and submit:</p>\n                <input\n                    type='text'\n                    onChange={this.myChangeHandler}\n                />\n                <input\n                    type='submit'\n                />\n                <h4> The result :{this.state.result}</h4>\n            </form>\n        );\n    }\n}\n\n\nexport default LiftInput;","import React from 'react';\nimport LiftInput from './components/LiftInput/lift-input'\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <LiftInput />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}